@model IEnumerable<eAMS.Models.Models.PropMaint>
@{
    Layout = "~/Views/Shared/_PropertyLayout.cshtml";
}

<link rel="stylesheet" href="~/Content/PropertyTheme/maintain-search.css" />

<div class="container" style="margin-top:3%">
    <a href="#" class="btn btn-info" onclick="AddNewAction()">Add New Action</a>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Property Code</th>
                <th>Action Done</th>
                <th>Date Done</th>
                <th>Reality Cost</th>
            </tr>
        </thead>
        <tbody id="">
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Code)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Action)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RCost)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PropRegi.Name)
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="modal fade" id="AlterModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 id="AlterModal-Title"></h4>
                </div>
                <div class="modal-body">
                    <form id="form" class="col-sm-offset-3">
                        <fieldset id="SubmitForm">
                            <input name="ID" id="ActionID" type="text" hidden />
                            <div class="form-group autocomplete">
                                <label for="Code">Property Code:</label>
                                <input name="Code" id="PropCode" 
                                       type="text" class="form-control" 
                                       placeholder="To find the original" onkeyup="FindPropertyCode()"/>
                            </div>
                            <div class="form-group">
                                <label for="Action">Action Done:</label>
                                <input name="Action" id="MainAction" type="text" class="form-control" placeholder="What did you do?" />
                            </div>
                            <div class="form-group">
                                <label for="Date">Date Done:</label>
                                <input name="Date" id="MainDate" type="date" class="form-control" placeholder="When did you do that?" />
                            </div>
                            <div class="form-group">
                                <label for="RCost">Reality Cost:</label>
                                <input name="RCost" id="MainRCost" type="number" class="form-control" placeholder="How much did you pay for real?" />
                            </div>
                        </fieldset>
                    </form>
                </div>
                <div class="modal-footer">
                    <a class="btn btn-default" data-dismiss="modal">Close</a>
                    <a class="btn btn-danger" id="SaveAction">Save Changes</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script>

    function DataBinding(DataList) {
        const SetMaintainData = $("#SetMaintainData");

        SetMaintainData.empty();
        for (let i = 0; i < DataList.length; i++) {
            const Data = `<tr class="row_${DataList[i].ID}">
                <td>${DataList[i].Code}</td>
                <td>${DataList[i].Action}</td>
                <td>${DataList[i].Date}</td>
                <td>${DataList[i].RCost}</td>
                <td>${DataList[i].PropRegi.Name}</td>
                <td><a class="btn btn-info" onclick="EditProperty(${DataList[i].ID})">Edit</a></td>
                </tr>`;
            SetMaintainData.append(Data);
        }
    }

    function AddNewAction() {
        $("#form")[0].reset();
        $("#ActionID").val(0);
        $("#AlterModal-Title").html("Add New Property");
        $("#AlterModal").modal("show");
    }

    $("#SaveAction").click(() => {
        const data = $("#SubmitForm").serialize();
        const url = "/Maintain/SaveAction";

        $.ajax({
            type: "POST",
            url: url,
            data: data,
            success: (data) => {
                window.location.href = "/Maintain/Index";
                $("#AlterModal").modal("hide");
            },
            error: (err) => {
                console.log(err);
            }
        });
    });

    function FindPropertyCode() {
        const PropCode = $("#PropCode").val().trim();
        const url = `/Property/GetPropertyByCode?PropertyCode=${PropCode}`;

        $.ajax({
            type: "GET",
            url: url,
            data: {
                propertyCode: PropCode
            },
            success: (data) => {
                console.log(data)
                if (data === "Error") {
                    alert("You cannot pass unknown, that's unelegant")
                } else {
                    //GetData
                    const inp = $("#PropCode");
                    let arr = [];
                    for (let i = 0; i < data.length; i++) {
                        arr.push(data[i].Code);
                    }
                    autocomplete(document.getElementById("PropCode"), arr);
                }
            },
            error: (err) => {
                console.log(err);
            }
        });
    }

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            console.log(x);
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>